definitions:
  models.ResultData:
    properties:
      digits:
        type: integer
      lines:
        type: integer
      paragraph:
        type: integer
      punctuation:
        type: integer
      spaces:
        type: integer
      specialcharacters:
        type: integer
      symboles:
        type: integer
      vowels:
        type: integer
      words:
        type: integer
    type: object
  models.User:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  models.UserCredentials:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
host: localhost:3000
info:
  contact: {}
  title: Golang Task
  version: "2.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs in a user using email and password, returns JWT token on success.
      parameters:
      - description: User Email and Password
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.UserCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Login User
      tags:
      - Auth
  /auth/registerUser:
    post:
      consumes:
      - application/json
      description: Register user using name, email and password, returns JWT token
        on success.
      parameters:
      - description: User Name, Email and Password
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Register User
      tags:
      - Auth
  /getUserData:
    get:
      description: Retrieves data stored by the user and returns it as JSON.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResultData'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Get User Data
      tags:
      - User
  /getUserData/{page}:
    get:
      description: Retrieves user data by page number. Returns paginated JSON data.
      parameters:
      - description: Page number
        in: path
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid page number
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get User Data (Paginated)
      tags:
      - User
  /uploadfile:
    post:
      consumes:
      - multipart/form‑data
      description: Uploads a file via multipart/form‑data and returns its metadata.
      parameters:
      - description: Select file to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResultData'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Upload a File
      tags:
      - File
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
