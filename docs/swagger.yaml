basePath: /
definitions:
  models.User:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  models.UserCredentials:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
host: localhost:3000
info:
  contact: {}
  title: Golang Task
  version: "3.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs in a user using email and password, returns JWT token on success.
      parameters:
      - description: User Email and Password
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.UserCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Login User
      tags:
      - Auth
  /auth/registerUser:
    post:
      consumes:
      - application/json
      description: Register user using name, email and password, returns JWT token
        on success.
      parameters:
      - description: User Name, Email and Password
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Register User
      tags:
      - Auth
swagger: "2.0"
